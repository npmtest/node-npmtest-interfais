{"/home/travis/build/npmtest/node-npmtest-interfais/test.js":"/* istanbul instrument in package npmtest_interfais */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-interfais/lib.npmtest_interfais.js":"/* istanbul instrument in package npmtest_interfais */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_interfais = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_interfais = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-interfais/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-interfais && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_interfais */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_interfais\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_interfais.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_interfais.rollup.js'] =\n            local.assetsDict['/assets.npmtest_interfais.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_interfais.__dirname + '/lib.npmtest_interfais.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/main.js":"module.exports = require('./lib/classes/Interfais');","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/Interfais.js":"var layoutFactory = require('./../factories/layoutFactory'),\n\tUiFactory     = require('./../factories/UiFactory'),\n\tViewFactory   = require('./../factories/ViewFactory'),\n\n\tInputManager  = require('./../managers/InputManager'),\n\tFocusManager  = require('./../managers/FocusManager'),\n\tRouteManager  = require('./../managers/RouteManager');\n\n/**\n * @namespace Interfais\n * @param config\n * @constructor\n */\nfunction Interfais (config) {\n\t/**\n\t * @name Interfais#config\n\t * @type {Object}\n\t */\n\tthis.config = config;\n\n\t/**\n\t * @name Interfais#inputManager\n\t * @type {InputManager}\n\t */\n\tthis.inputManager = new InputManager(this);\n\n\t/**\n\t * @name Interfais#focusManager\n\t * @type {FocusManager}\n\t */\n\tthis.focusManager = new FocusManager(this);\n\n\t/**\n\t * @name Interfais#routeManager\n\t * @type {RouteManager}\n\t */\n\tthis.routeManager = new RouteManager(this);\n\n\t/**\n\t * @name Interfais#uiFactory\n\t * @memberof Interfais\n\t * @type {UiFactory}\n\t */\n\tthis.uiFactory    = new UiFactory(this);\n\n\t/**\n\t * @name Interfais#viewFactory\n\t * @type {ViewFactory}\n\t */\n\tthis.viewFactory  = new ViewFactory(this);\n\n\tinit.apply(this);\n}\n\nfunction init() {\n\tvar $this = this;\n\t$this.layout = layoutFactory($this);\n\n\t// When another route is opened\n\t$this.routeManager.onRouteChange(function () {\n\t\t$this.focusManager.select(); // Shouldnt be neccessary, but avoids the \"no focus before first refocus\" bug\n\t});\n\n\n\t// When terminal is resized\n\tprocess.stdout.on('resize', function () {\n\t\t$this.layout.prerender();\n\t\t$this.layout.render();\n\t});\n\n\t$this.layout.prerender();\n\n\t$this.inputManager.init();\n\n\t// @TODO: The following system crash occurs when keyNext == 'menuNext', but not when keyPrevious = 'menuPrevious'\n\t// TypeError: Cannot read property 'emitter' of null\n\t//     at EventEmitter.forkedEmitter.emitter.destroy (/home/wybe/git/interfais/lib/managers/InputManager.js:79:17)\n\t//     at FocusableObject.command.blur (/home/wybe/git/interfais/lib/factories/aspects/uiInput.js:58:13)\n\t//     at FocusManager.select (/home/wybe/git/interfais/lib/managers/FocusManager.js:104:31)\n\t//     at FocusManager.shift (/home/wybe/git/interfais/lib/managers/FocusManager.js:93:8)\n\t//     at EventEmitter.<anonymous> (/home/wybe/git/interfais/lib/managers/FocusManager.js:51:11)\n\t//     at EventEmitter.emit (events.js:117:20)\n\t//     at ReadStream.emitKeyboardEvent (/home/wybe/git/interfais/lib/managers/InputManager.js:171:21)\n\t//     at ReadStream.emit (events.js:98:17)\n\t//     at emitKey (/home/wybe/git/interfais/node_modules/keypress/index.js:566:10)\n\t//     at ReadStream.onData (/home/wybe/git/interfais/node_modules/keypress/index.js:47:11)\n\n\t$this.focusManager.init({\n\t\tkeyPrevious:  'focusPrevious',\n\t\tkeyNext: 'focusNext'\n\t});\n\n\t$this.routeManager.init();\n\n\t$this.layout.render();\n\n\t$this.inputManager.on('exit', function (key) {\n\t\tconsole.log('Exiting after ' + key.combo);\n\t\tprocess.exit();\n\t});\n\n\n\t$this.inputManager.on('render', function () {\n\t\t$this.layout.prerender();\n\t\t$this.layout.render();\n\t});\n\n\n}\n\nmodule.exports = Interfais;","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/factories/layoutFactory.js":"var Layout = require('./../classes/Layout'),\n\tRow = require('./../classes/Row'),\n\tCell = require('./../classes/Cell');\n\n\nfunction LayoutFactory(app) {\n\n\tvar config = app.config.layout,\n\t\tfocus = app.focusManager,\n\t\troute = app.routeManager;\n\n\tfunction interpretLayoutConfig(options) {\n\t\tif (!options)\n\t\t\tthrow new Error('No layout configuration');\n\n\t\tvar rows, layout;\n\n\t\tif (typeof options.map === 'function') {\n\t\t\trows = options.map(interpretRowConfig);\n\t\t\toptions = {};\n\n\t\t} else {\n\t\t\trows = (options.rows || []).map(interpretRowConfig);\n\t\t\toptions.rows = null;\n\t\t}\n\n\t\tlayout = new Layout(options);\n\n\t\trows.forEach(function (row) {\n\t\t\tlayout.addChild(row);\n\t\t});\n\n\t\treturn layout;\n\t}\n\n\tfunction interpretRowConfig(options) {\n\t\tvar cells, row;\n\n\t\tif (typeof options.map === 'function') {\n\t\t\tcells = options.map(interpretCellConfig);\n\t\t\toptions = {};\n\t\t} else {\n\t\t\tcells = (options.cells || []).map(interpretCellConfig);\n\t\t}\n\n\t\trow = new Row(options);\n\n\t\tcells.forEach(function (cell) {\n\t\t\trow.addChild(cell);\n\t\t});\n\n\t\treturn row;\n\t}\n\n\tfunction interpretCellConfig(cellConfig) {\n\t\tvar cell;\n\n\t\tif (typeof cellConfig === 'function'){\n\t\t\tcell = new Cell();\n\t\t\tcell.setView(app.viewFactory(cellConfig));\n\n\t\t} else {\n\t\t\tcell = new Cell(cellConfig);\n\n\t\t\tif (cellConfig.name) {\n\t\t\t\troute.registerCell(cellConfig.name, cell);\n\t\t\t}\n\n\t\t\tif (cellConfig.view) {\n\t\t\t\tcell.setView(app.viewFactory(cellConfig.view));\n\t\t\t}\n\n\t\t\tif (cell.canFocus) {\n\t\t\t\tfocus.add(cell);\n\t\t\t}\n\t\t}\n\n\t\treturn cell;\n\t}\n\n\treturn interpretLayoutConfig(config);\n}\n\nmodule.exports = LayoutFactory;\n","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/Layout.js":"var RecursiveObject = require('./RecursiveObject');\n\n/*\n * @param {Object} options\n * @param {Number} [options.width]\n * @param {Number} [options.height]\n * @returns {Cell}\n * @constructor\n */\nfunction Layout (options) {\n\tRecursiveObject.apply(this, arguments);\n\n\treturn this;\n}\n\nLayout.prototype = new RecursiveObject;\n\nLayout.prototype.prerender = function () {\n\tvar prerendered = this.availableSpace();\n\n\tprerendered.x = 0;\n\tprerendered.y = 1;\n\n\tthis.prerendered = prerendered;\n\n\tthis.getChildren().forEach(function (row, i, children) {\n\t\trow.prerender(\n\t\t\tprerendered, // Bounding box\n\t\t\ti > 0\n\t\t\t\t? children[i - 1].prerendered\n\t\t\t\t: { x: prerendered.x, y: prerendered.y } // Previous sibling, or parent x&y\n\t\t);\n\t});\n};\n\nLayout.prototype.render = function () {\n\tthis.getChildren().forEach(function (cell) {\n\t\tcell.render();\n\t});\n\n\treturn this;\n};\n\nLayout.prototype.availableSpace = function () {\n\tvar size = {\n\t\twidth:  this.width  || process.stdout.columns,\n\t\theight: this.height || process.stdout.rows\n\t};\n\n\t// TODO: When the screen resizes (from large to small or the other way around) and the width comes past a point that\n\t// a flowing column (view content, it appears) should or should no longer be rendered, the system crashes. This appears\n\t// to be caused by an infinite loop, process with exit after out-of-memory.\n\t// To avoid, width is hardcoded to 60, here's hoping\n\tif (size.width < 60)\n\t\tsize.width = 60;\n\tif (size.height < 10)\n\t\tsize.height = 10;\n\n\treturn size;\n};\n\nmodule.exports = Layout;\n","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/RecursiveObject.js":"var ConfigurableObject = require('./ConfigurableObject');\n\n/*\n * Conveinience object that can have more RecursiveObjects (or inheriting) in it.\n * @todo Make parent and children private, only available through getters and setters\n * @todo Method \"removeChild\" and possibly \"removeParent\"\n * @todo Review if making a chainable object is really what we want\n * @returns {RecursiveObject}\n * @constructor\n */\nfunction RecursiveObject(options) {\n\tConfigurableObject.apply(this, arguments);\n\n\tthis.parent = null;\n\tthis.children = [];\n\treturn this;\n}\n\nvar configurableObject = new ConfigurableObject;\nRecursiveObject.prototype = configurableObject;\n\n/*\n * Returns whichever is defined first:\n *     own attribute,\n *     the parent getter for this attribute,\n *     the parent attribute,\n *     or its own attribute (undefined or whatever)\n * @note Overwrites the get() method on ConfigurableObject to be recursive\n * @param {String} attr\n * @param {Boolean} [noInherit]\n * @returns {*}\n */\nRecursiveObject.prototype.get = function (attr, noInherit) {\n\tif (noInherit)\n\t\treturn this[attr];\n\n\treturn this[attr] || (this.parent && typeof this.parent.get == 'function' ? this.parent.get(attr, noInherit) : (this.parent ? this.parent[attr] : this[attr]));\n};\n\n/**\n * @returns {Boolean}\n */\nRecursiveObject.prototype.hasParent = function () {\n\treturn !!this.parent;\n};\n\n/**\n * @returns {ConfigurableObject}\n */\nRecursiveObject.prototype.getParent = function () {\n\treturn this.parent;\n};\n/**\n * @param {ConfigurableObject} parent\n * @returns {ConfigurableObject} self\n */\nRecursiveObject.prototype.setParent = function (parent) {\n\tthis.parent = parent;\n\treturn this;\n};\n\n\n/**\n * @returns {Array.<ConfigurableObject>}\n */\nRecursiveObject.prototype.getParents = function () {\n\tvar parents = [],\n\t\troot = this;\n\n\twhile ((root = root.getParent()) && parents.length < 100) {\n\t\tparents.unshift(root);\n\t}\n\treturn parents;\n};\n\n/**\n * @returns {Array.<ConfigurableObject>}\n */\nRecursiveObject.prototype.getSiblings = function () {\n\tvar self = this;\n\treturn this.parent ? (this.parent.children || []).filter(function (sibling) {\n\t\treturn sibling !== self;\n\t}) : [];\n};\n\n/**\n * @param {ConfigurableObject} child\n * @returns {Boolean}\n */\nRecursiveObject.prototype.hasChild = function (child) {\n\treturn this.children.indexOf(child) >= 0;\n};\n\n/**\n * @returns {Array.<ConfigurableObject>}\n */\nRecursiveObject.prototype.getChildren = function () {\n\treturn this.children;\n};\n\n/**\n * @param {ConfigurableObject} child\n * @returns {ConfigurableObject} self\n */\nRecursiveObject.prototype.addChild = function (child) {\n\tthis.children.push(child);\n\n\tif (typeof child.setParent == 'function')\n\t\tchild.setParent(this);\n\n\treturn this;\n};\n\nmodule.exports = RecursiveObject;","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/ConfigurableObject.js":"function ConfigurableObject (config) {\n\tif (typeof config === 'string')\n\t\tconfig = { name: config };\n\n\tfor (var attr in config) {\n\t\tthis[attr] = config[attr];\n\t}\n}\n\nConfigurableObject.prototype.set = function (attrName, value) {\n\tif (typeof attrName === 'object') {\n\t\tfor (var realAttrName in attrName)\n\t\t\tif (attrName.hasOwnProperty(realAttrName))\n\t\t\t\tthis.set(realAttrName, attrName[realAttrName]);\n\n\t\treturn this;\n\t}\n\n\tthis[attrName] = value;\n\n\treturn this;\n};\n\nConfigurableObject.prototype.get = function (attrName) {\n\treturn this[attrName];\n};\n\nmodule.exports = ConfigurableObject;","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/Row.js":"var RecursiveObject = require('./RecursiveObject');\n\n/*\n * @param {Object} options\n * @param {Number} [options.height]\n * @returns {Row}\n * @constructor\n */\nfunction Row(options) {\n\tRecursiveObject.apply(this, arguments);\n\n\treturn this;\n}\n\nRow.prototype = new RecursiveObject;\n\nRow.prototype.setAsFocused = function () {\n\tthis.menu.setAsFocused();\n};\n\n\nRow.prototype.prerender = function (confinement, previousSibling) {\n\tvar self = this,\n\t\tprerendered = self.availableSpace(confinement);\n\n\tprerendered.x = previousSibling.x;\n\tprerendered.y = previousSibling.y + (previousSibling.height || 0);\n\n\tthis.prerendered = prerendered;\n\n\tthis.getChildren().forEach(function (cell, i, children) {\n\t\tcell.prerender(prerendered, i > 0 ? children[i - 1].prerendered : { x: prerendered.x, y: prerendered.y });\n\t});\n};\n\nRow.prototype.availableSpace = function (parentSize) {\n\tvar height = this.height;\n\n\tif (!height) {\n\t\t// @TODO: Find a more DRY way to do this and the Cell scenario\n\t\theight = this.getParent().prerendered.height;\n\t\tvar competition = 1;\n\t\tthis.getSiblings().forEach(function (cell) {\n\t\t\tif (cell.height)\n\t\t\t\theight -= cell.height;\n\t\t\telse\n\t\t\t\t++competition;\n\t\t});\n\t\theight = height / competition;\n\t}\n\n\treturn {\n\t\twidth: parentSize.width,\n\t\theight: height\n\t};\n};\n\n\nRow.prototype.render = function () {\n\tthis.getChildren().forEach(function (cell) {\n\t\tcell.render();\n\t});\n\n\treturn this;\n};\n\n\nmodule.exports = Row;\n","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/Cell.js":"var RecursiveObject = require('./RecursiveObject');\n\n/*\n * @param {Object} options\n * @param {Number} [options.width]\n * @returns {Cell}\n * @constructor\n */\nfunction Cell (options) {\n\tRecursiveObject.apply(this, arguments);\n\treturn this;\n}\n\nCell.prototype = new RecursiveObject;\n\n\nCell.prototype.focus = function () {\n\tif (this.view && typeof this.view.focus === 'function')\n\t\tthis.view.focus();\n};\n\nCell.prototype.blur = function () {\n\tif (this.view && typeof this.view.blur === 'function')\n\t\tthis.view.blur();\n};\n\nCell.prototype.prerender = function (confinement, previousSibling) {\n\tvar self = this,\n\t\tprerendered = self.availableSpace(confinement);\n\n\tprerendered.x = previousSibling.x + (previousSibling.width || 0);\n\tprerendered.y = previousSibling.y;\n\n\tthis.prerendered = prerendered;\n\tif (this.view && this.view.prerender)\n\t\tthis.view.prerender();\n};\n\n\nCell.prototype.render = function () {\n\tif (!this.view)\n\t\treturn;\n\n\tif (!this.prerendered)\n\t\treturn;\n\n\tif (!this.prerendered.width || this.prerendered.width <= 0)\n\t\treturn;\n\n\tif (!this.prerendered.height || this.prerendered.height <= 0)\n\t\treturn;\n\n\tthis.view.render();\n};\n\nCell.prototype.setView = function (view, args) {\n\tif (this.view && typeof this.view.close === 'function')\n\t\tthis.view.close();\n\n\tdelete this.view;\n\n\tthis.view = new view(this, args);\n\n\tif (typeof this.view.open === 'function') {\n\t\tthis.view.open();\n\t}\n\n\tif (this.prerendered) {\n\t\tthis.view.prerender();\n\t\tthis.render();\n\t}\n\n\treturn this;\n};\n\nCell.prototype.availableSpace = function (parentSize) {\n\tvar width = this.width;\n\n\tif (!width) {\n\t\t// @TODO: Allow callback to calc width (fn(parent.width, parent.height){})\n\t\t// @TODO: Find a more DRY way to do this and the Row scenario\n\t\twidth = this.getParent().prerendered.width;\n\t\tvar competition = 1;\n\t\tthis.getSiblings().forEach(function (cell) {\n\t\t\tif (cell.width)\n\t\t\t\twidth -= cell.width;\n\t\t\telse\n\t\t\t\t++competition;\n\t\t});\n\t\twidth = width / competition;\n\t}\n\n\treturn {\n\t\twidth: width,\n\t\theight: parentSize.height\n\t};\n};\n\n\nmodule.exports = Cell;","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/factories/UiFactory.js":"var paintHelper = require('../helpers/paintHelper'),\n\tFocusManager = require('../managers/FocusManager'),\n\tEventEmitter = require('events').EventEmitter;\n\nmodule.exports = function UiFactory (app) {\n\n\tpaintHelper.init();\n\n\t/**\n\t * Accumulates configuration in order to render and rerender UI elements like paragraphs,\n\t * lists, menu options and fork fields. Also handles some basic stuff on the UI like scrolling\n\t * and menu focus. Most render items take a function as an argument instead of the regular fork,\n\t * to enable you to inject your own logic at (pre)rendertime.\n\t * @TODO Should not rerender when scroll has no effect\n\t * @class Ui\n\t * @example\n\t *     module.exports = function MyFirstView (ui, viewParams) {\n\t *         var name = null;\n\t *         ui\n\t *             .h1('Whats up!')\n\t *             .paragraph('blabla whatever longtext wrapping etc')\n\t *             .list(['blabla whatever longtext wrapping etc'])\n\t *             .option('Close', function() {\n\t *                 process.exit();\n\t *             })\n\t *             .input('Name: ', function(value) {\n\t *                 name = value;\n\t *                 ui.render();\n\t *             })\n\t *             .ruler('-')\n\t *             .line(function() {\n\t *                 return ['Your name is ' + (name ? name : 'a big mystery')];\n\t *             })\n\t *             .spacer();\n\t *     };\n\t */\n\tfunction Ui () {\n\t\tthis._background = null;\n\t\tthis._foreground = null;\n\t\tthis._box = {};\n\t\tthis._emitter = new EventEmitter();\n\t\tthis._padding = { x: 0, y: 0 };\n\t\tthis._margin = { x: 0, y: 0 };\n\t\tthis._scroll = { x: 0, y: 0 }; // > 0 means scrolled down/right\n\t\tthis._queue = [];\n\t\tthis._menu = null;\n\n\t}\n\n\t/**\n\t * On creating a new UI by chaining the configuration, your renderer methods (line, paragraph, menu, h1, etc.) are\n\t * queued for output, so that they can be rerun when another render cycle, with different dimensions, occurs.\n\t * @method Ui.queue\n\t * @param {Function} method\n\t * @param {Array.<*>} args\n\t * @param {Object} formatting\n\t * @param {Boolean} formatting.blink - Havent seen this work\n\t * @param {Boolean} formatting.bold\n\t * @param {Boolean} formatting.dim\n\t * @param {Boolean} formatting.hidden - Not sure if this works\n\t * @param {Boolean} formatting.invert\n\t * @param {Boolean} formatting.underline\n\t * @param {Boolean} formatting.uppercase\n\t * @param formatting\n\t * @returns {_queue}\n\t */\n\tUi.queue = function queueMethodForRenderTime (method, args, formatting) {\n\t\tvar queuedLine = {\n\t\t\tmethod: method,\n\t\t\targs: args,\n\t\t\tformatting: formatting\n\t\t};\n\n\t\tthis._queue.push(queuedLine);\n\n\t\treturn this;\n\t};\n\n\tUi.makeInteractive = function makeFocusableMenu() {\n\t\tvar $this = this;\n\n\t\tif ($this._menu)\n\t\t\treturn;\n\n\t\t$this._menu = new FocusManager(app);\n\n\t\t$this.on('focus', function() {\n\t\t\t$this._menu.init({\n\t\t\t\tkeyNext: 'menuNext',\n\t\t\t\tkeyPrevious: 'menuPrevious',\n\t\t\t\tkeyConfirm: 'menuConfirm'\n\t\t\t}, function () {\n\t\t\t\t$this.render();\n\t\t\t});\n\t\t});\n\n\t\t$this.on('blur', function() {\n\t\t\t$this._menu.destroy();\n\t\t});\n\t\t$this.on('close', function() {\n\t\t\t$this._menu.destroy();\n\t\t});\n\n\t};\n\n\t/*\n\t Enable Ui with different aspects, which are at this time pretty coarse parts of what the ui object\n\t lets you configurates. It largely dictates how UI behaves (which is bad, should be more OO).\n\t @TODO: Should be more object oriented\n\t @TODO: Rely more on the uiEmitter for state changes, so that render color & focusness etc. can be more modular\n\t        and old code can be deleted\n\t */\n\n\n\trequire('./aspects/uiBasics')(app, Ui);\n\trequire('./aspects/uiEmitter')(app, Ui);\n\trequire('./aspects/uiFocus')(app, Ui);\n\trequire('./aspects/uiInput')(app, Ui);\n\trequire('./aspects/uiOption')(app, Ui);\n\trequire('./aspects/uiRender')(app, Ui);\n\trequire('./aspects/uiScroll')(app, Ui);\n\trequire('./aspects/uiSpacing')(app, Ui);\n\trequire('./aspects/uiStream')(app, Ui);\n\n\treturn Ui;\n};","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/helpers/paintHelper.js":"var charm = require('charm')(),\n\tstringHelper = require('./stringHelper');\n\n/**\n * @namespace paintHelper\n */\nmodule.exports = paint = {\n\tinit: init,\n\trenderLine: renderLine,\n\trenderRectangle: renderRectangle,\n\tsetBackground: setBackground,\n\tsetForeground: setForeground,\n\tresetColors: resetColors,\n\twipe: wipe\n};\n\n\n/**\n * Binds the painter to STDOUT and sets some less-vital event listeners\n * @memberof paintHelper\n */\nfunction init () {\n\tcharm.pipe(process.stdout);\n\twipe();\n\n\t// @TODO: not sure if this belongs here\n\tprocess.on('exit', function () {\n\t\t//paint.wipe();\n\t\tcharm.cursor(true);\n\t});\n}\n\n\n/**\n * @memberof paintHelper\n */\nfunction wipe () {\n\tcharm.reset();\n\tcharm.cursor(false);\n\tprocess.stdout.write('\\x1b[0m');\n}\n\n\n/**\n * Resets both fore- and background to terminal defaults\n * @memberof paintHelper\n */\nfunction resetColors () {\n\tprocess.stdout.write('\\x1b[0m');\n\n\treturn this;\n}\n\n\n/**\n * {String|Number| color\n * @memberof paintHelper\n */\nfunction setBackground (color) {\n\tif (!color)\n\t\tprocess.stdout.write('\\x1b[49m');\n\telse\n\t\tcharm.background(color);\n\n\treturn this;\n}\n\n\n/**\n * {String|Number| color\n * @memberof paintHelper\n */\nfunction setForeground (color) {\n\tif (!color)\n\t\tprocess.stdout.write('\\x1b[39m');\n\telse\n\t\tcharm.foreground(color);\n\n\treturn this;\n}\n\n\n/**\n * @param {Object} boundingBox\n * @param {Number} boundingBox.x\n * @param {Number} boundingBox.y\n * @param {Number} boundingBox.width\n * @param {Number} boundingBox.height\n * @memberof paintHelper\n */\nfunction renderRectangle(boundingBox, color) {\n\tpaint.setBackground(color);\n\n\tfor (var i = 0; i < boundingBox.height; i++)\n\t\tcharm\n\t\t\t.position(boundingBox.x + 1, boundingBox.y + i)\n\t\t\t.write(stringHelper.resize('', boundingBox.width, true));\n\n\n\treturn this;\n}\n\n\n/**\n * @param {Object} start\n * @param {Number} start.x\n * @param {Number} start.y\n * @param {String} line\n * @memberof paintHelper\n */\nfunction renderLine (start, line) {\n\tcharm\n\t\t.position(start.x + 1, start.y)\n\t\t.write(line);\n\n\treturn this;\n}","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/helpers/stringHelper.js":"/**\n * Helper functions for doing string magic.\n * @namespace stringHelper\n */\nmodule.exports = {\n\tfill: fill,\n\tformat: format,\n\tresize: resize\n};\n\nvar FORMATTING_FLAGS = {\n\tblink: ['\\x1b[5m', '\\x1b[25m'],\n\tbold: ['\\x1b[1m', '\\x1b[21m'],\n\tdim: ['\\x1b[2m', '\\x1b[22m'],\n\thidden: ['\\x1b[8m', '\\x1b[28m'],\n\tinvert: ['\\x1b[7m', '\\x1b[27m'],\n\tunderline: ['\\x1b[4m', '\\x1b[24m']\n};\n\n/**\n * Repeats char untill length is reached or exceeded, and returns the trimmed string.\n * @memberof stringHelper\n * @method fill\n * @param length\n * @param char\n * @returns {string}\n */\nfunction fill(length, char) {\n\tif (!char)\n\t\tchar = ' ';\n\n\tvar string = '';\n\n\twhile (string.length < length)\n\t\tstring = string + char;\n\n\treturn string.substr(0, length);\n}\n\n/**\n * Applies the formatting codes that come with the FORMATTING_FLAGS. This is the last time one can trust line.length\n * @method format\n * @memberof stringHelper\n * @param options\n * @returns {string}\n * @param text\n */\nfunction format(options, text) {\n\tvar str = '';\n\n\tObject.keys(FORMATTING_FLAGS).forEach(function (formattingFlag) {\n\t\tif (!options[formattingFlag])\n\t\t\treturn;\n\t\tstr = str + FORMATTING_FLAGS[formattingFlag][0];\n\t});\n\n\tif (!text)\n\t\ttext = options.text;\n\n\tif (options.uppercase)\n\t\ttext = text.toUpperCase();\n\n\tstr = str + text;\n\n\tObject.keys(FORMATTING_FLAGS).reverse().forEach(function (formattingFlag) {\n\t\tif (!options[formattingFlag])\n\t\t\treturn;\n\t\tstr = str + FORMATTING_FLAGS[formattingFlag][1];\n\t});\n\n\treturn str;\n}\n\n\n/**\n * Resizes a string to a given size. Initially acts as a string padder, but\n * if padding=false it will clip. Can also do both and align text all the while.\n * @method resize\n * @memberof stringHelper\n * @param {String} string\n * @param {Number} length The ideal new string length. Defaults to 16\n * @param {String | Boolean} [padding] Defaults to one space character. Will never pad if set to false, implying clip=true\n * @param {Boolean} [alignRight] Truthy would pad unto the left end, right-aligning text\n * @param {Boolean} [clip] If true, will always ensure the text is never longer than given length. Defaults to opposite of padding.\n * @returns {*}\n */\nfunction resize(string, length, padding, alignRight, clip) {\n\t// If  a padding string is specified, use it.f it's false, do not pad, and else use normal spaces.\n\tpadding = padding && padding.length ? padding : (padding === false ? false : ' ' );\n\n\t// Use clip setting if it was explicitly set to true or false, else use the opposite of padding\n\tclip = clip === !!clip ? clip : !padding;\n\n\tif (string.length === length)\n\t// Take a bow and exit early\n\t\treturn string;\n\n\tif (string.length > length)\n\t// Return the string or a clipped version (taking alignment into account)\n\t\treturn !clip ? string : string.substr(alignRight ? (string.length - length) : 0, length);\n\n\tif (padding !== false && string.length < length)\n\t// If the string is not long enough, pad on appropriate side\n\t\tstring = alignRight ? fill(length - string.length, padding) + string : string + fill(length - string.length, padding);\n\n\treturn string;\n}","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/managers/FocusManager.js":"var FocusableObject = require('../classes/FocusableObject');\n\nmodule.exports = FocusManager;\nmodule.exports.FocusableObject = FocusableObject;\n\n/**\n * Takes care of focus on a subset of focusables (Cells and UI option/input items)\n * @name FocusManager\n * @param {Interfais} app\n * @constructor\n */\nfunction FocusManager(app) {\n\tvar $this = this,\n\t\tfocusableItems = [],\n\t\tfocusIndex = null,\n\t\tdestroyers = [];\n\n\tthis.FocusableObject = FocusableObject;\n\n\t/**\n\t * Sets event listeners on inputManager for this instance. Event listeners should be unset using destroy().\n\t * @method FocusManager#init\n\t * @param {Object} [keyConfig] Map keys to actions on the array. Unmapped actions will not be enabled.\n\t * @param {String} [keyConfig.keyPrevious] Keyname to map to \"focus on previous menu\" action\n\t * @param {String} [keyConfig.keyNext] Keyname to map to \"focus on next menu\" action\n\t * @param {String} [keyConfig.keyConfirm] Keyname to map to \"select focused menu item\" action\n\t * @param {Function} [onFocusChange] Executes whenever focus on this menu is changed.\n\t * @TODO: Refactor onFocusChange argument to be configured through dedicated method\n\t * @TODO: Concatenate all key override configurables in an object that is more generic than\n\t *        current key configuration names focusNext, focusPrevious, menuNext, menuPrevious.\n\t *        Suggested variable names: keyNext, keyPrevious, keyConfirm, keyEscape\n\t */\n\tthis.init = function (keyConfig, onFocusChange) {\n\t\tif(destroyers.length)\n\t\t\treturn; // Already initialized\n\n\t\tvar actions = {\n\t\t\tkeyPrevious: function keyPrevious(key) {\n\t\t\t\t$this.shift(true);\n\n\t\t\t\tif(typeof onFocusChange === 'function')\n\t\t\t\t\tonFocusChange($this.getCurrent(), key);\n\t\t\t},\n\t\t\tkeyNext: function keyNext (key) {\n\t\t\t\t$this.shift(false);\n\n\t\t\t\tif(typeof onFocusChange === 'function')\n\t\t\t\t\tonFocusChange($this.getCurrent(), key);\n\t\t\t},\n\t\t\tkeyConfirm: function keyConfirm(key) {\n\t\t\t\t$this.getCurrent().confirm();\n\t\t\t}\n\t\t};\n\n\n\t\tfor (var focusAction in keyConfig) {\n//\t\t\tif(!keyConfig.hasOwnProperty(focusAction))\n//\t\t\t\tcontinue;\n\n\t\t\tvar inputKeyName = keyConfig[focusAction];\n\n\t\t\tif(!inputKeyName)\n\t\t\t\tcontinue;\n\t\t\tvar thisParticularAction = actions[focusAction];\n\n\t\t\tif(typeof thisParticularAction !== 'function')\n\t\t\t\tthrow new Error('You\\'re configuring the \"'+inputKeyName+'\" key for \"'+focusAction+'\" on a new FocusManager, which doesnt exist');\n\n\t\t\tapp.inputManager.on(inputKeyName, thisParticularAction);\n\n\t\t\tdestroyers.push({\n\t\t\t\tinputKeyName: inputKeyName,\n\t\t\t\tfocusAction: focusAction,\n\t\t\t\tcb: thisParticularAction\n\t\t\t});\n\t\t}\n\n\t\tif(focusableItems.length)\n\t\t\t$this.select(focusIndex === null ? 0 : focusIndex);\n\t};\n\n\t/**\n\t * Destroys listeners on inputManager for the events in init()\n\t * @method FocusManager#destroy\n\t */\n\tthis.destroy = function() {\n\t\twhile(destroyers.length > 0){\n\t\t\tvar destroyer = destroyers.pop();\n\t\t\tapp.inputManager.off(destroyer.inputKeyName, destroyer.cb);\n\t\t};\n\t};\n\n\t/**\n\t * List an item as focusable. Will automatically select it if it's the first one.\n\t * @method FocusManager#add\n\t * @param focusableItem\n\t * @returns {FocusManager}\n\t */\n\tthis.add = function (focusableItem) {\n\t\tfocusableItems.push(focusableItem);\n\n\t\treturn this;\n\t};\n\t/**\n\t * Planned for use while restructuring layout or disabling input() or option() UI. Not currently in use.\n\t * @method FocusManager#remove\n\t * @param focusableItem\n\t * @returns {FocusManager}\n\t */\n\tthis.remove = function (focusableItem) {\n\t\tfocusableItems.splice(focusableItems.indexOf(focusableItem), 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns wether or not given object is already focusably by this manager.\n\t * @method FocusManager#isFocusable\n\t * @param focusableItem\n\t * @returns {boolean}\n\t */\n\tthis.isFocusable = function (focusableItem) {\n\t\treturn focusableItems.indexOf(focusableItem) >= 0;\n\t};\n\n\t/**\n\t * Return the currently focused element. Do not call lifecycle methods on it!\n\t * @method FocusManager#getCurrent\n\t * @returns {*}\n\t */\n\tthis.getCurrent = function () {\n\t\treturn focusableItems[focusIndex];\n\t};\n\n\t/**\n\t * Focus the next focusable item.\n\t * @method FocusManager#shift\n\t * @param {Boolean} [reverse] True to focus previous item\n\t */\n\tthis.shift = function (reverse) {\n\t\tif(!focusableItems.length)\n\t\t\treturn;\n\n\t\t++this.shifts;\n\t\tvar i = focusIndex || 0;\n\n\t\tif (reverse)\n\t\t\ti = i === 0 ? focusableItems.length - 1 : --i;\n\t\telse\n\t\t\ti = i === focusableItems.length - 1 ? 0 : ++i;\n\n\t\tthis.select(i);\n\t};\n\n\t/**\n\t * @method FocusManager#select\n\t * @param {Number} [nth] Focus on the nth item, or refocus on current (safe)\n\t */\n\tthis.select = function (nth) {\n\n\t\tif(nth === undefined)\n\t\t\tnth = focusIndex;\n\n\t\tif (!focusableItems[nth])\n\t\t\tthrow new Error('View ' + nth + ' does not exist');\n\n\t\tif (typeof focusableItems[nth].focus !== 'function')\n\t\t\tthrow new Error('View ' + nth + ' has no focus()');\n\n\t\tif (focusIndex !== null && focusableItems[focusIndex].blur)\n\t\t\tfocusableItems[focusIndex].blur();\n\n\t\tfocusIndex = nth;\n\n\t\tfocusableItems[nth].focus();\n\t};\n\n}","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/classes/FocusableObject.js":"function FocusableObject (name) {\n\tthis.name = name;\n}\n\nFocusableObject.prototype.blur = function () {\n\n};\n\nFocusableObject.prototype.focus = function () {\n\n};\n\nFocusableObject.prototype.enter = function () {\n\n};\n\nFocusableObject.prototype.escape = function () {\n\n};\n\nFocusableObject.prototype.confirm = function () {\n\n};\n\nmodule.exports = FocusableObject;","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/factories/ViewFactory.js":"module.exports = function (app) {\n\tvar inputManager = app.inputManager,\n\t\tfocusManager = app.focusManager,\n\t\tuiFactory = app.uiFactory;\n\n\t/**\n\t *\n\t * @param {Function} cb Inject app UI config here, cb is called with the result of uiFactory for the relevant view\n\t * @returns {View}\n\t */\n\tfunction viewFactory(cb) {\n\n\t\treturn function View (cell, args) {\n\n\t\t\tvar $this = this,\n\t\t\t\tui = new uiFactory(),\n\t\t\t\tactive = false,\n\t\t\t\tfocused = false,\n\t\t\t\trenderInterval = false,\n\t\t\t\tdimmedForegroundColor = 242;\n\n\t\t\tif(focusManager.isFocusable(cell))\n\t\t\t\tui.foreground(dimmedForegroundColor);\n\n\t\t\ttry {\n\t\t\t\tcb(ui, args);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Error while constructing a new ui in viewFactory');\n\t\t\t\tconsole.error(e.stack);\n\t\t\t\tprocess.exit();\n\t\t\t}\n\n\t\t\t$this.open = function () {\n\t\t\t\tui.emit('open');\n\t\t\t\tactive = true;\n\n\t\t\t\tif (ui.interval && ui.interval > 0)\n\t\t\t\t\trenderInterval = setInterval(function () {\n\t\t\t\t\t\tui.emit('interval');\n\t\t\t\t\t\t$this.render();\n\t\t\t\t\t}, ui.interval);\n\t\t\t};\n\n\t\t\t$this.prerender = function () {\n\t\t\t\tui.within({\n\t\t\t\t\twidth: cell.prerendered.width,\n\t\t\t\t\theight: cell.prerendered.height,\n\t\t\t\t\tx: cell.prerendered.x,\n\t\t\t\t\ty: cell.prerendered.y\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t$this.render = function () {\n\t\t\t\tui.emit('render');\n\t\t\t\tif (active)\n\t\t\t\t\tui.render();\n\t\t\t};\n\n\t\t\t$this.focus = function () {\n\t\t\t\tfocused = true;\n\n\t\t\t\tui.emit('focus');\n\n\t\t\t\tif(focusManager.isFocusable(cell))\n\t\t\t\t\tui.foreground(false);\n\n\t\t\t\t$this.render();\n\t\t\t\tscrollSetListeners()\n\n\t\t\t};\n\n\t\t\t$this.blur = function () {\n\t\t\t\tfocused = false;\n\n\t\t\t\tui.emit('blur');\n\n\n\t\t\t\t//@TODO: Conditionally, configurably, hip-hop\n\t\t\t\tif(focusManager.isFocusable(cell))\n\t\t\t\t\tui.foreground(dimmedForegroundColor);\n\n\t\t\t\tscrollRemoveListeners();\n\t\t\t\t$this.render();\n\t\t\t};\n\n\t\t\t$this.close = function () {\n\n\t\t\t\tui.emit('close');\n\n\t\t\t\tif (ui.interval)\n\t\t\t\t\tclearInterval(renderInterval);\n\n\t\t\t\tscrollRemoveListeners();\n\n\t\t\t\tui.off();\n\n\t\t\t\tactive = false;\n\n\n\t\t\t\t// @TODO: Dirty hack to stop redrawing views that are no longer opened should not be dirty\n\t\t\t\t//        - Should fix $this when doing the eventemitter stuff\n\t\t\t\t//        - Should test $this also\n\t\t\t\tui.render = function() {\n\n\t\t\t\t};\n\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @TODO: Move the following functions to their congruent ui aspects, and rely on event emitterness\n\t\t\t */\n\n\t\t\tfunction scrollSetListeners() {\n\t\t\t\tinputManager.on('scrollUp', scrollUp);\n\t\t\t\tinputManager.on('scrollDown', scrollDown);\n\t\t\t}\n\n\t\t\tfunction scrollRemoveListeners() {\n\t\t\t\tinputManager.off('scrollUp', scrollUp);\n\t\t\t\tinputManager.off('scrollDown', scrollDown);\n\t\t\t}\n\n\t\t\tfunction scrollDown() {\n\t\t\t\tui.scrollDown();\n\t\t\t\tui.render();\n\t\t\t}\n\n\t\t\tfunction scrollUp() {\n\t\t\t\tui.scrollUp();\n\t\t\t\tui.render();\n\t\t\t}\n\n\n\t\t}\n\t}\n\n\treturn viewFactory;\n};","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/managers/InputManager.js":"var keypress = require('keypress'),\n\tEventEmitter = require('events').EventEmitter,\n\tREGEX_VALID_SYSNAMES = new RegExp(/^[a-zA-Z0-9-+=_!@#~\\$%\\^&\\*\\(\\)\\[\\]\\{\\}<>\\.\\,:;\\u00C0-\\u00ff]+$/);\n\nmodule.exports = InputManager;\n\n/**\n * @name InputManager\n * @param {Interfais} app\n * @constructor\n */\nfunction InputManager(app) {\n\tvar $this = this,\n\t\tinternalEmitter = new EventEmitter(),\n\t\tforkedEmitter = null,\n\t\tconfigurableKeys = {\n\t\t\texit: ['ctrl+q', 'ctrl+c'],\n\t\t\trender: 'ctrl+r',\n\t\t\tscrollUp: 'shift+up',\n\t\t\tscrollDown: 'shift+down',\n\t\t\tfocusNext: 'tab',\n\t\t\tfocusPrevious: 'shift+tab',\n\t\t\tmenuPrevious: 'up',\n\t\t\tmenuNext: 'down',\n\t\t\tmenuConfirm: 'return'\n\t\t},\n\t\tspecialKeys = {};\n\n\t/**\n\t * Initalize inputmanager, effecively hijacks stdin and creates an internal EventEmitter to do\n\t * all kinds of clever shit.\n\t * @method InputManager#init\n\t */\n\t$this.init = function () {\n\t\tkeypress(process.stdin);\n\n\t\tprocess.stdin.setRawMode(true);\n\t\tprocess.stdin.resume();\n\n\t\tprocess.stdin.on('keypress', emitKeyboardEvent);\n\n\t\tif(app.config.keyBinds)\n\t\t\tfor(var action in app.config.keyBinds)\n\t\t\t\tif(app.config.keyBinds.hasOwnProperty(action) && (app.config.keyBinds[action].length > 0 || app.config.keyBinds[action] === false))\n\t\t\t\t\tconfigurableKeys[action] = app.config.keyBinds[action];\n\n\t\tfor(var action in configurableKeys)\n\t\t\tif(configurableKeys.hasOwnProperty(action) && configurableKeys[action])\n\t\t\t\t$this.catch(configurableKeys[action], action);\n\t};\n\n\t/**\n\t * Creates a temporary EventEmitter that handles a select range of input so it\n\t * can be handled in an {UiFactory#input} field. Accepts backspace, delete, return,\n\t * arrows left and right, home and end. Additionally you can configure a regex to\n\t * match for valid characters, default is a-zA-Z0-9 and some special characters,\n\t * but not spaces.\n\t *\n\t * @note Call 'destroy' method on the returned object to remove the forked event-\n\t * emitter etc.\n\t *\n\t * @method InputManager#fork\n\t * @param regex\n\t * @returns {EventEmitter}\n\t */\n\t$this.fork = function (regex) {\n\t\tif (forkedEmitter !== null) {\n\t\t\tforkedEmitter.emitter.destroy();\n\t\t}\n\n\t\tif (!regex)\n\t\t\tregex = REGEX_VALID_SYSNAMES;\n\n\t\tforkedEmitter = {\n\t\t\temitter: new EventEmitter(),\n\t\t\tregex: regex\n\t\t};\n\n\t\tforkedEmitter.emitter.destroy = function () {\n\t\t\tif(forkedEmitter === null) {\n\t\t\t\t// @EXCEPTION: A forked Input emitter was destroyed twice for unknown reason.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tforkedEmitter.emitter.removeAllListeners();\n\t\t\tforkedEmitter = null;\n\t\t};\n\n\t\treturn forkedEmitter.emitter;\n\t};\n\n\t/**\n\t * Add an event listener and prevent event from being emitted to other listeners. Any key combination can be caught\n\t * only once, $this function overwrites the previous catch.\n\t * @method InputManager#catch\n\t * @param {String|Array<String>} combo\n\t * @param {String|Function} eventOrCb InutManager emits event if this is a string, or executes the callback if it is a function\n\t */\n\t$this.catch = function (combo, eventOrCb) {\n\t\tif (typeof combo === 'object' && combo.length)\n\t\t\tcombo.forEach(function (comboItem) {\n\t\t\t\t$this.catch(comboItem, eventOrCb);\n\t\t\t});\n\t\telse\n\t\t\tspecialKeys[combo] = eventOrCb;\n\t};\n\n\t/**\n\t * Release an event which would normally be caught.\n\t * @method InputManager#release\n\t * @param {String|Array<String>} combo\n\t */\n\t$this.release = function (combo) {\n\t\tif (typeof combo === 'object' && combo.length)\n\t\t\tcombo.forEach(function (comboItem) {\n\t\t\t\t$this.release(comboItem);\n\t\t\t});\n\t\telse\n\t\t\tspecialKeys[combo] = null;\n\t};\n\n\t/**\n\t * Add an event listener\n\t * @method InputManager#on\n\t * @param {String|Array<String>} combo\n\t * @param {Function} cb\n\t */\n\t$this.on = function (combo, cb) {\n\t\tif (typeof combo === 'object' && combo.length)\n\t\t\tcombo.forEach(function (comboItem) {\n\t\t\t\t$this.on(comboItem, cb);\n\t\t\t});\n\t\telse\n\t\t\tinternalEmitter.addListener.apply(internalEmitter, arguments);\n\t};\n\n\t/**\n\t * Remove an event listener\n\t * @method InputManager#off\n\t * @param {String|Array<String>} combo\n\t * @param {String|Function} cb\n\t */\n\t$this.off = function (combo, cb) {\n\t\tif (typeof combo === 'object' && combo.length)\n\t\t\tcombo.forEach(function (comboItem) {\n\t\t\t\t$this.off(comboItem, cb);\n\t\t\t});\n\t\telse {\n\t\t\tinternalEmitter.removeListener.apply(internalEmitter, arguments);\n\t\t}\n\t};\n\n\tfunction emitKeyboardEvent(ch, key) {\n\n\t\t// Normalize keypress output to always have a key object\n\t\tif (!key)\n\t\t\tkey = {}; // Unknown keys (eg. numpad)\n\t\tif (ch !== undefined) {\n\t\t\tkey.sequence = ch;\n\t\t}\n\n\t\t// Compile string that ID's a pressed combo, as examples: a, shift+a, shift+meta+a\n\t\tvar keyName = [];\n\n\t\t['ctrl', 'shift', 'meta'].forEach(function (modifier) {\n\t\t\tif (key[modifier]) keyName.push(modifier);\n\t\t});\n\t\tkeyName.push(key.name);\n\n\t\tkey.combo = keyName.join('+');\n\n\t\t// Delegate all keypresses to either the catch mechanism or the internal event emitter.\n\t\tif (specialKeys[key.combo]) {\n\t\t\tvar eventOrCb = specialKeys[key.combo];\n\t\t\tif(typeof eventOrCb === 'function')\n\t\t\t\tspecialKeys[key.combo](key);\n\t\t\telse if(typeof eventOrCb === 'string')\n\t\t\t\tinternalEmitter.emit(eventOrCb, key);\n\t\t\treturn;\n\t\t} else {\n\t\t\tinternalEmitter.emit('*', key);\n\t\t\tinternalEmitter.emit(key.combo, key);\n\t\t}\n\n\n\t\tif (!forkedEmitter)\n\t\t\treturn;\n\t\tif (['backspace', 'delete', 'return', 'left', 'right', 'home', 'end'].indexOf(key.name) >= 0) {\n\t\t\treturn forkedEmitter.emitter.emit(key.name, key);\n\t\t}\n\t\tif (forkedEmitter.regex.test(key.sequence))\n\t\t\treturn forkedEmitter.emitter.emit('*', key);\n\t}\n}\n\n","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/managers/RouteManager.js":"module.exports = RouteManager;\n/**\n * @name RouteManager\n * @TODO: Subject to refactoring, code is quite old.\n * @param {Interfais} app\n * @constructor\n */\nfunction RouteManager(app) {\n\n\tvar routes = {},\n\t\tcells = {},\n\t\tonRouteChange = [];\n\n\n\t/**\n\t * @method RouteManager#init\n\t */\n\tthis.init = function () {\n\n\t};\n\n\t/**\n\t * @method RouteManager#registerRoute\n\t * @param routeName\n\t * @param routeViews\n\t */\n\tthis.registerRoute = function (routeName, routeViews) {\n\t\tObject.keys(routeViews).forEach(function (routeViewFn) {\n\t\t\trouteViews[routeViewFn] = app.viewFactory(routeViews[routeViewFn]);\n\t\t});\n\t\troutes[routeName] = routeViews;\n\t};\n\n\t/**\n\t * @method RouteManager#registerCell\n\t * @param cellName\n\t * @param cell\n\t */\n\tthis.registerCell = function (cellName, cell) {\n\t\tcells[cellName] = cell;\n\t};\n\n\t/**\n\t * @method RouteManager#openRoute\n\t * @param routeName\n\t * @param args\n\t * @returns {*}\n\t */\n\tthis.openRoute = function (routeName, args) {\n\t\tvar route = routes[routeName];\n\n\t\tif (!route && routes['404'])\n\t\t\treturn this.openRoute('404', args);\n\n\t\tfor (var cellName in route) {\n\t\t\tif (route.hasOwnProperty(cellName)) {\n\t\t\t\tthis.openView(cellName, route[cellName], args);\n\t\t\t}\n\t\t}\n\n\t\tonRouteChange.forEach(function (listener) {\n\t\t\tlistener(route, routeName);\n\t\t});\n\t};\n\n\t/**\n\t * @method RouteManager#openView\n\t * @param cellName\n\t * @param view\n\t * @param args\n\t */\n\tthis.openView = function (cellName, view, args) {\n\t\tvar cell = cells[cellName];\n\n\t\t// If cell does not exist, skip\n\t\tif (!cell)\n\t\t\tthrow new Error('Route contains invalid cell \"' + cellName + '\"');\n\t\tcell.setView(view, args);\n\t};\n\n\t/**\n\t * @method RouteManager#onRouteChange\n\t * @TODO: Make event emitter because fuck you\n\t * @param cb\n\t */\n\tthis.onRouteChange = function (cb) {\n\t\tonRouteChange.push(cb);\n\t}\n\n}","/home/travis/build/npmtest/node-npmtest-interfais/node_modules/interfais/lib/helpers/renderHelper.js":"var wordwrap = require('wordwrap'),\n\tstringHelper = require('./stringHelper');\n\n/*\n * Render functions that may be queued with their respective arguments.\n *\n * All prerenderers return an array of strings that are already wrapped and colorized, so that they can be rerendered easily.\n *\n * All prerenderers have the uiFactory context.\n *\n * @todo not strictly helper functions because they assume to have a certain context!\n */\nvar prerender = {\n\n\tspacer: function () {\n\t\treturn [undefined];\n\t},\n\n\truler: function (char) {\n\t\treturn [stringHelper.fill(this.getContentWidth(), char)];\n\t},\n\n\tline: function (lines) {\n\t\tif (!(typeof lines === 'object' && lines.length))\n\t\t\tlines = [lines];\n\n\t\tvar width = this.getContentWidth();\n\t\treturn lines.map(function (line) {\n\t\t\tif (!line)\n\t\t\t\treturn '$ invalid line';\n\t\t\treturn line.substr(0, width)\n\t\t});\n\t},\n\n\tkeyValue: function (pairs, options) {\n\n\t\tif(!options)\n\t\t\toptions = {};\n\n\n\t\tif(typeof pairs === 'object' && typeof pairs.forEach !== 'function')\n\t\t\tpairs = Object.keys(pairs).map(function(keyName) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: keyName,\n\t\t\t\t\tvalue: pairs[keyName]\n\t\t\t\t};\n\t\t\t});\n\n\t\tif(!pairs || !pairs.length)\n\t\t\treturn null;\n\n\t\tvar seperatorString = options.seperator || '    ',\n\t\t\tkeyFormatting = {\n\t\t\t\tdim: true\n\t\t\t},\n\t\t\tkeyWidth = options.keyWidth || pairs.reduce(function(maxLength, pair) {\n\t\t\t\tif(pair.key.length > maxLength)\n\t\t\t\t\treturn pair.key.length;\n\t\t\t\treturn maxLength;\n\t\t\t}, 0),\n\t\t\tseperatorWidth = seperatorString.length,\n\t\t\tvalueWidth = this.getContentWidth() - keyWidth - seperatorWidth;\n\n\t\treturn pairs.reduce(function (pairLines, pair) {\n\t\t\tvar linesInWrappedValue = wordwrap(0, valueWidth, { mode: 'hard' })('' + pair.value).split('\\n');\n\n\t\t\treturn pairLines.concat(linesInWrappedValue.map(function (line, i) {\n\t\t\t\tvar str = '';\n\t\t\t\tif(i === 0)\n\t\t\t\t\tstr += stringHelper.format(keyFormatting, pair.key + stringHelper.fill(keyWidth - pair.key.length) + seperatorString);\n\t\t\t\telse\n\t\t\t\t\tstr += stringHelper.fill(keyWidth + seperatorWidth);\n\n\t\t\t\tstr += line;\n\n\t\t\t\treturn str;\n\t\t\t}));\n\t\t}, []);\n\t},\n\n\tlist: function (text) {\n\t\tvar indent = 0,\n\t\t\tindentChar = '  >  ',\n\t\t\tindentWidth = indentChar.length,\n\t\t\tindentCharFormatting = {\n\t\t\t\tdim: true\n\t\t\t},\n\t\t\twidth = this.getContentWidth() - (indent + 1) * indentWidth;\n\n\t\tif (!(typeof text === 'object' && text.length))\n\t\t\ttext = [text];\n\n\t\ttext = text.reduce(function (previousValue, currentValue) {\n\t\t\tvar listItemLines = (typeof currentValue === 'string' || typeof currentValue === 'number')\n\t\t\t\t? wordwrap(0, width, { mode: 'hard' })('' + currentValue).split('\\n')\n\t\t\t\t: currentValue;\n\n\t\t\treturn previousValue.concat(listItemLines.map(function (line, i) {\n\t\t\t\treturn stringHelper.fill(indent * indentWidth) + (i === 0 ? stringHelper.format(indentCharFormatting, indentChar) : stringHelper.fill(indentWidth)) + line;\n\t\t\t}));\n\t\t}, []);\n\n\t\treturn text;\n\t},\n\n\tparagraph: function (text, formatting) {\n\t\tvar width = this.getContentWidth();\n\n\t\tif (!(typeof text === 'object' && text.length))\n\t\t\ttext = [text];\n\n\t\ttext = text.reduce(function (previousValue, currentValue) {\n\t\t\treturn previousValue.concat(\n\t\t\t\t(typeof currentValue === 'string' || typeof currentValue === 'number')\n\t\t\t\t\t? stringHelper.format(formatting || {}, wordwrap(0, width, { mode: 'hard' })('' + currentValue)).split('\\n')\n\t\t\t\t\t: currentValue\n\t\t\t);\n\t\t}, []);\n\n\t\treturn text;\n\t}\n};\n\n\nmodule.exports = prerender;\n"}